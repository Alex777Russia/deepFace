from deepface.DeepFace import verify, analyze, represent
import numpy as np
import pandas as pd
import datetime

from service import post_photo, get_photo

backends = [
  'opencv', 
  'ssd', 
  'dlib', 
  'mtcnn', 
  'retinaface', 
  'mediapipe',
  'yolov8',
  'yunet',
  'fastmtcnn',
]

models = [
  "VGG-Face", 
  "Facenet", 
  "Facenet512", 
  "OpenFace", 
  "DeepFace", 
  "DeepID", 
  "ArcFace", 
  "Dlib", 
  "SFace",
]

metrics = ["cosine", "euclidean", "euclidean_l2"]

MODEL_NAME: str = "VGG-Face"
BACKEND: str = "yolov8"
METRICS: str = "cosine"
IMG_PATH: str = "gallery/1.jpg"
START_ID: int = -1

LOCAL_PATH_GALLERY: str = "photos/"


def prepare_data(data_base):
    database_images_start = pd.read_csv(data_base)
    database_images_start = database_images_start.drop('Unnamed: 0', axis=1)

    result = database_images_start['vector'].apply(lambda x: np.array(list(map(float, (x[1:-2].split(", "))))))
    database_images_start.vector = result
    return database_images_start

database_images = prepare_data("database.csv")

def cos(a, b):
    return a@b/((a**2).sum() * (b**2).sum())

def find_photo(path: str) -> tuple:
    '''
    –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –¥–≤—É—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    input:
        path: str - –ø—É—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    output:
        (type: str, data: [str, str] or None, status: str)
        data - —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –¥–≤—É–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º —Å–∫–∞—á–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º.
    '''

    data = None

    try:
        embedding_objs = represent(model_name=MODEL_NAME, 
                      detector_backend=BACKEND, 
                      img_path=path)
        embedding = embedding_objs[0]["embedding"]
        embedding = np.array(embedding)
    except Exception as e:
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–∏–Ω–≥–∞ –ø–æ–∏—Å–∫–∞")
        return ('FIND', data, 'ERR')
    
    result = []

    try:
        for i in range(database_images.shape[0]):
            row = database_images.iloc[i]
            result.append([cos(embedding, row.vector), row.url])

        result = sorted(result, reverse=False)
        data = [result[-1], result[-2]]
    except Exception as e:
        print("–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –¥–≤—É—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        return ('FIND', data, 'ERR')

    try:
        result_photo_1 = get_photo(save_local_path=LOCAL_PATH_GALLERY + data[0][1], from_url=data[0][1]) 
        result_photo_2 = get_photo(save_local_path=LOCAL_PATH_GALLERY + data[1][1], from_url=data[1][1])

        if (result_photo_1 == None) or (result_photo_2 == None):
            return ('FIND', None, 'ERR')
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GET")
        return ('FIND', None, 'ERR')

    return ('FIND', data, 'OK')

def analysis_photo(path: str) -> tuple:
    '''
    –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —ç–º–æ—Ü–∏—é.
    input:
        path: str - –ø—É—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    output:
        (type: str, data: str or None, status: str)
        data - —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç –±–æ—Ç–∞.
    '''
    try:
        data = analyze(img_path=path, actions=['age', 'gender', 'race', 'emotion'])
    except Exception as e:
        print("–†–∞–±–æ—Ç–∞ –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞")
        return ('ANLS', None, 'ERR')
    
    try:
        data = data[0]
        age = data['age']
        gender = data['dominant_gender']
        race = data['dominant_race']
        emotion = data['dominant_emotion']

        data = f'–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞\n –≤–æ–∑—Ä–∞—Å—Ç: {age}\n –ø–æ–ª: {gender}\n –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {race}\n —ç–º–æ—Ü–∏—è: {emotion}'
    except Exception as e:
        print("–ü–∞—Ä—Å–∏–Ω–≥ –¥–∂–µ–π—Å–æ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞")
        return ('ANLS', None, 'ERR')
    
    return ('ANLS', data, 'OK')

def compare_photos(path1: str, path2: str) -> tuple:
    '''
    –ú–µ—Ç–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –¥–≤—É—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    input:
        path: str - –ø—É—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    output:
        (type: str, data: str or None, status: str)
        data - —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç –±–æ—Ç–∞.
    '''
    try:
        data = verify(img1_path=path1, img2_path=path2, detector_backend=BACKEND)
    except Exception as e:
        print("–†–∞–±–æ—Ç–∞–¥–∞ –º–µ—Ç–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return ('CMPR', None, 'ERR')

    try:
        verified = '—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚úÖ' if data['verified'] == True else '—Ä–∞–∑–Ω—ã–µ –ª—é–¥–∏ ‚õî'
        distance = data['distance']
        treshold_to_verify = data['threshold']
        model = data['model']
        similarity_metric = data['similarity_metric']

        data = f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n —Å—Ö–æ–∂–µ—Å—Ç—å: {verified}\n —Ä–∞—Å—Å—Ç—Ä–æ—è–Ω–∏–µ: {distance}\n –ø–æ—Ä–æ–≥: {treshold_to_verify}\n –º–æ–¥–µ–ª—å: {model}\n –º–µ—Ç—Ä–∏–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏: {similarity_metric}'
    except Exception as e:
        print("–ü–∞—Ä—Å–∏–Ω–≥ –¥–∂–µ–π—Å–æ–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞")
        return ('CMPR', None, 'ERR')
    
    return ('CMPR', data, 'OK')

def add_photo(path: str) -> tuple:
    '''
    –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–±—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    input:
        path: str - –ø—É—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    output:
        (type: str, data: str or None, status: str)
        data - —Å—Ç—Ä–æ–∫–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—É—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç –±–æ—Ç–∞.
    '''
    global database_images
    list_of_paths = database_images.path.to_list()

    if path.split("/")[1] in list_of_paths:
        print("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ –µ—Å—Ç—å –≤ –ë–î")
        data = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î!'
        return ('ADD', data, 'OK')

    try:
        embedding_objs = represent(model_name=MODEL_NAME, 
                      detector_backend=BACKEND, 
                      img_path=path)
    except Exception as e:
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–∏–Ω–≥–∞")
        return ('ADD', None, 'ERR: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–∏–Ω–≥–∞')
    
    print(path)
    try:
        messageTime = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        TimeStamp = str(messageTime)

        result_post_photo = post_photo(local_path=path, url=path)
        if result_post_photo == None:
           return ('ADD', None, 'ERR')
    except Exception as e:
        print("–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ë–î")
        return ('ADD', None, 'ERR: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ë–î')

    try:
        dict = {
          'path': path.split("/")[1], 
          'vector': [embedding_objs[0]["embedding"]], 
          'dateTime': TimeStamp, 
          'url': path.split("/")[1]
        }
        new_image = pd.DataFrame({k: v for k, v in dict.items()})
        new_image.to_csv("new.csv")

        new_images = pd.read_csv("new.csv")
        database_img = pd.read_csv("database.csv")
        update_dataframe = pd.concat([database_img, new_images], ignore_index = True)
        update_dataframe.to_csv("database.csv")
    except Exception as e:
        print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ dataset")
        return ('ADD', None, 'ERR: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ dataset')
    
    try:
        database_images = prepare_data("database.csv")
    except Exception as e:
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î")
        data = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.. üòî'
        return ('ADD', data, 'OK')

    data = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—â—É—é –±–∞–∑—É –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, —Å–ø–∞—Å–∏–±–æ! üóÉÔ∏è'
    return ('ADD', data, 'OK')

